'use client';

import { useState } from 'react';
import { useForm } from 'react-hook-form';
import { zodResolver } from '@hookform/resolvers/zod';
import { z } from 'zod';
import { motion } from 'framer-motion';
import { useMutation } from '@tanstack/react-query';
import { contactApi } from '@3de/apis';
import { ContactUs } from '@3de/interfaces';
import { 
  Send, 
  User, 
  Mail, 
  Phone, 
  MessageSquare,
  CheckCircle,
  AlertCircle,
  Loader2
} from 'lucide-react';
import { Button } from '@3de/ui';

// Schema للتحقق من البيانات
const contactSchema = z.object({
  name: z
    .string()
    .min(2, 'الاسم يجب أن يكون على الأقل حرفين')
    .max(50, 'الاسم لا يجب أن يزيد عن 50 حرف'),
  email: z
    .string()
    .email('يرجى إدخال بريد إلكتروني صحيح')
    .min(1, 'البريد الإلكتروني مطلوب'),
  phone: z
    .string()
    .regex(/^[\+]?[0-9]{10,15}$/, 'يرجى إدخال رقم هاتف صحيح')
    .optional()
    .or(z.literal('')),
  message: z
    .string()
    .min(10, 'الرسالة يجب أن تكون على الأقل 10 أحرف')
    .max(1000, 'الرسالة لا يجب أن تزيد عن 1000 حرف'),
});

type ContactFormData = z.infer<typeof contactSchema>;

interface ContactFormProps {
  onSubmit?: (data: ContactFormData) => Promise<void>;
  className?: string;
}

export default function ContactForm({ onSubmit, className = '' }: ContactFormProps) {
  const [submitStatus, setSubmitStatus] = useState<{
    type: 'success' | 'error' | null;
    message: string;
  }>({ type: null, message: '' });

  const {
    register,
    handleSubmit,
    formState: { errors, isValid },
    reset,
    watch,
  } = useForm<ContactFormData>({
    defaultValues: {
      name: '',
      email: '',
      phone: '',
      message: '',
    },
  });

  const watchedMessage = watch('message', '');

  // Contact mutation
  const contactMutation = useMutation({
    mutationFn: (data: ContactUs) => contactApi.create(data),
    onSuccess: () => {
      setSubmitStatus({
        type: 'success',
        message: 'تم إرسال رسالتك بنجاح! سنتواصل معك قريباً.',
      });
      reset();
    },
    onError: () => {
      setSubmitStatus({
        type: 'error',
        message: 'حدث خطأ أثناء إرسال الرسالة. يرجى المحاولة مرة أخرى.',
      });
    },
  });

  const handleFormSubmit = async (data: ContactFormData) => {
    setSubmitStatus({ type: null, message: '' });

    try {
      if (onSubmit) {
        await onSubmit(data);
      } else {
        // Transform data to match ContactUs interface
        const contactData: ContactUs = {
          id: '', // Will be generated by backend
          name: data.name,
          email: data.email,
          phone: data.phone || '',
          message: data.message,
          createdAt: new Date(),
          updatedAt: new Date(),
        };
        
        contactMutation.mutate(contactData);
      }
    } catch (error) {
      setSubmitStatus({
        type: 'error',
        message: 'حدث خطأ أثناء إرسال الرسالة. يرجى المحاولة مرة أخرى.',
      });
    }
  };

  const isSubmitting = contactMutation.isPending;

  return (
    <div className={`max-w-2xl mx-auto ${className}`}>
      {/* Form Header */}
      <motion.div
        initial={{ opacity: 0, y: 20 }}
        animate={{ opacity: 1, y: 0 }}
        transition={{ duration: 0.6 }}
        className="text-center mb-8"
      >
        <h2 className="text-3xl font-bold text-text-primary mb-4">
          تواصل معنا
        </h2>
        <p className="text-text-secondary">
          نحن هنا للإجابة على جميع استفساراتك ومساعدتك في رحلتك التعليمية
        </p>
      </motion.div>

      {/* Status Message */}
      {submitStatus.type && (
        <motion.div
          initial={{ opacity: 0, y: -10 }}
          animate={{ opacity: 1, y: 0 }}
          className={`mb-6 p-4 rounded-lg flex items-center gap-3 gap-reverse ${
            submitStatus.type === 'success'
              ? 'bg-green-50 text-green-800 border border-green-200'
              : 'bg-red-50 text-red-800 border border-red-200'
          }`}
        >
          {submitStatus.type === 'success' ? (
            <CheckCircle size={20} />
          ) : (
            <AlertCircle size={20} />
          )}
          <span>{submitStatus.message}</span>
        </motion.div>
      )}

      {/* Form */}
      <motion.form
        initial={{ opacity: 0, y: 20 }}
        animate={{ opacity: 1, y: 0 }}
        transition={{ duration: 0.6, delay: 0.1 }}
        onSubmit={handleSubmit(handleFormSubmit)}
        className="space-y-6"
      >
        {/* Name and Email Row */}
        <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
          {/* Name Field */}
          <div className="form-group">
            <label className="form-label">
              <User size={16} className="inline ml-1" />
              الاسم الكامل *
            </label>
            <input
              {...register('name')}
              type="text"
              className={`form-input ${errors.name ? 'border-red-500 focus:ring-red-500' : ''}`}
              placeholder="أدخل اسمك الكامل"
            />
            {errors.name && (
              <p className="form-error">{errors.name.message}</p>
            )}
          </div>

          {/* Email Field */}
          <div className="form-group">
            <label className="form-label">
              <Mail size={16} className="inline ml-1" />
              البريد الإلكتروني *
            </label>
            <input
              {...register('email')}
              type="email"
              className={`form-input ${errors.email ? 'border-red-500 focus:ring-red-500' : ''}`}
              placeholder="example@domain.com"
            />
            {errors.email && (
              <p className="form-error">{errors.email.message}</p>
            )}
          </div>
        </div>

        {/* Phone Field */}
        <div className="form-group">
          <label className="form-label">
            <Phone size={16} className="inline ml-1" />
            رقم الهاتف (اختياري)
          </label>
          <input
            {...register('phone')}
            type="tel"
            className={`form-input ${errors.phone ? 'border-red-500 focus:ring-red-500' : ''}`}
            placeholder="+966 5X XXX XXXX"
          />
          {errors.phone && (
            <p className="form-error">{errors.phone.message}</p>
          )}
        </div>

        {/* Message Field */}
        <div className="form-group">
          <label className="form-label">
            <MessageSquare size={16} className="inline ml-1" />
            الرسالة *
          </label>
          <textarea
            {...register('message')}
            className={`form-textarea ${errors.message ? 'border-red-500 focus:ring-red-500' : ''}`}
            placeholder="اكتب رسالتك هنا..."
            rows={5}
          />
          <div className="flex justify-between items-center mt-1">
            {errors.message && (
              <p className="form-error">{errors.message.message}</p>
            )}
            <span className={`text-xs ml-auto ${
              watchedMessage.length > 900 ? 'text-red-500' : 'text-text-secondary'
            }`}>
              {watchedMessage.length}/1000
            </span>
          </div>
        </div>

        {/* Submit Button */}
        <motion.div
          initial={{ opacity: 0 }}
          animate={{ opacity: 1 }}
          transition={{ delay: 0.3 }}
          className="pt-4"
        >
          <Button
            type="submit"
            disabled={!isValid || isSubmitting}
            className="w-full bg-gradient-primary hover:opacity-90 disabled:opacity-50"
            size="lg"
          >
            {isSubmitting ? (
              <>
                <Loader2 className="ml-2 animate-spin" size={20} />
                جاري الإرسال...
              </>
            ) : (
              <>
                <Send className="ml-2" size={20} />
                إرسال الرسالة
              </>
            )}
          </Button>
        </motion.div>

        {/* Privacy Notice */}
        <motion.div
          initial={{ opacity: 0 }}
          animate={{ opacity: 1 }}
          transition={{ delay: 0.4 }}
          className="text-center text-sm text-text-secondary"
        >
          <p>
            بإرسال هذا النموذج، أنت توافق على{' '}
            <a href="/privacy" className="text-primary-main hover:underline">
              سياسة الخصوصية
            </a>{' '}
            و{' '}
            <a href="/terms" className="text-primary-main hover:underline">
              شروط الاستخدام
            </a>
          </p>
        </motion.div>
      </motion.form>
    </div>
  );
} 